The 'sandboxlib' library uses the PEP-8 coding style, as a guide.

# Running the automated test suite

Use `tox`. You'll need 'py.test', 'tox' and their dependencies available.

Note that a lot of the tests will be skipped if you don't run as 'root',
because some of the sandboxing backends only work when you are the 'root' user.

You can also run `PYTHONPATH=. py.test`, which is quicker but only tests with
a single version of Python, and runs in your host environment rather than a
clean one managed by 'virtualenv'.

# Testing that a sandbox conforms to the App Container spec

The [App Container project] provides an 'ace' package containing a
[validator application for App Container Executors (ACEs)].

If you want to test whether a particular sandbox 'exec' module conforms to the
App Container spec, try this. You'll need a [golang] compiler available, and you
might need to set the `GOPATH` environment variable to point to a path where
you're happy for Go to install dependencies.

First build the `ace-validator-main.aci` and `ace-validator-sidekick.aci` App
Container images.

    git clone git://github.com/appc/spec appc-spec
    cd appc-spec
    ace/build
    cd -

Then, use the `run-sandbox` program from this repository to run the image:

    run-sandbox appc-spec/ace/build/ace-validator-main.aci -e linux-user-chroot


[App Container project]: https://github.com/appc/spec
[validator application for App Container Executors (ACEs)]: https://github.com/appc/spec#validating-app-container-executors-aces
[golang]: https://golang.org/doc/install
